document.addEventListener('DOMContentLoaded', () => {
    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    const translations = {
        ru: {
            title: "–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á",
            appName: "–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
            addTasks: "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏",
            taskTitlePlaceholder: "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            lowPriority: "–ù–∏–∑–∫–∞—è",
            mediumPriority: "–°—Ä–µ–¥–Ω—è—è",
            highPriority: "–í—ã—Å–æ–∫–∞—è",
            categoryPlaceholder: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –†–∞–±–æ—Ç–∞)",
            addTaskButton: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
            timeLabel: "‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:",
            timePlaceholder: "–ß–ß:–ú–ú - –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 - 17:00)",
            submitTasks: "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            scheduleTitle: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã",
            errorEmptyTasks: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–¥–∞—á!",
            errorTimeFormat: "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú - –ß–ß:–ú–ú",
            errorApi: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            newLanguage: "–ù–æ–≤—ã–π —è–∑—ã–∫ –¥–æ—Å—Ç—É–ø–µ–Ω!"
        },
        en: {
            title: "AI Task Planner",
            appName: "AI Planner",
            addTasks: "Add Tasks",
            taskTitlePlaceholder: "Task Title",
            lowPriority: "Low",
            mediumPriority: "Medium",
            highPriority: "High",
            categoryPlaceholder: "Category (e.g., Work)",
            addTaskButton: "‚ûï Add Task",
            timeLabel: "‚è∞ Available Time:",
            timePlaceholder: "HH:MM - HH:MM (e.g., 09:00 - 17:00)",
            submitTasks: "üìÖ Get Schedule",
            scheduleTitle: "Schedule and Tips",
            errorEmptyTasks: "Fill in all task fields!",
            errorTimeFormat: "Specify time in HH:MM - HH:MM format",
            errorApi: "Error fetching schedule. Try again later.",
            newLanguage: "New language available!"
        },
        wd: {
            title: "üìÖüìã",
            appName: "üìÖü§ñ",
            addTasks: "‚ûïüìã",
            taskTitlePlaceholder: "üìù",
            lowPriority: "üîΩ",
            mediumPriority: "üîÑ",
            highPriority: "üîº",
            categoryPlaceholder: "üè∑Ô∏è (e.g., üíº)",
            addTaskButton: "‚ûïüìã",
            timeLabel: "‚è∞:",
            timePlaceholder: "üïí - üïî",
            submitTasks: "üìÖ‚úÖ",
            scheduleTitle: "üìÖüìù",
            errorEmptyTasks: "‚ö†Ô∏èüìù‚ùå",
            errorTimeFormat: "‚ö†Ô∏èüïíüïî",
            errorApi: "‚ö†Ô∏èü§ñ‚ùå",
            newLanguage: "üÜïüåê‚úÖ"
        }
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
    const adConfig = {
        text: "–ü–æ—Å–µ—Ç–∏—Ç–µ By ROlil Studio –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã!",
        url: "https://t.me/By_RORlil",
        imageUrl: "https://ibb.co/GQTv1mkn"
    };

    const taskList = document.getElementById('task-list');
    const addTaskBtn = document.getElementById('add-task-btn');
    const submitTasksBtn = document.getElementById('submit-tasks');
    const timeRangeInput = document.getElementById('time-range');
    const resultSection = document.querySelector('.result');
    const scheduleOutput = document.getElementById('schedule-output');
    const languageSwitcher = document.getElementById('language-switcher');
    const themeSwitcher = document.getElementById('theme-switcher');
    const adLink = document.getElementById('ad-link');
    const adImage = document.getElementById('ad-image');
    const adText = document.getElementById('ad-text');

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞
    adLink.href = adConfig.url;
    adImage.src = adConfig.imageUrl;
    adText.textContent = adConfig.text;

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    themeSwitcher.addEventListener('click', () => {
        const currentTheme = document.body.classList.contains('dark-theme') ? 'dark' : document.body.classList.contains('chaotic-theme') ? 'chaotic' : 'light';
        if (currentTheme === 'dark') {
            document.body.classList.remove('dark-theme');
            document.body.classList.add('light-theme');
            themeSwitcher.textContent = 'üåô';
            localStorage.setItem('theme', 'light');
        } else if (currentTheme === 'chaotic') {
            document.body.classList.remove('chaotic-theme');
            document.body.classList.add('light-theme');
            themeSwitcher.textContent = 'üåô';
            localStorage.setItem('theme', 'light');
        } else {
            document.body.classList.remove('light-theme');
            if (localStorage.getItem('chaoticUnlocked') && Math.random() > 0.5) {
                document.body.classList.add('chaotic-theme');
                applyChaoticTheme();
                themeSwitcher.textContent = 'üé®';
                localStorage.setItem('theme', 'chaotic');
            } else {
                document.body.classList.add('dark-theme');
                themeSwitcher.textContent = '‚òÄÔ∏è';
                localStorage.setItem('theme', 'dark');
            }
        }
    });

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ö–∞–æ—Ç–∏—á–Ω–æ–π —Ç–µ–º—ã
    function applyChaoticTheme() {
        const randomColor = () => `#${Math.floor(Math.random()*16777215).toString(16)}`;
        document.documentElement.style.setProperty('--primary-color', randomColor());
        document.documentElement.style.setProperty('--primary-hover', randomColor());
        document.documentElement.style.setProperty('--shadow', `0 4px 12px ${randomColor()}80`);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.body.classList.add(`${savedTheme}-theme`);
    themeSwitcher.textContent = savedTheme === 'dark' ? '‚òÄÔ∏è' : savedTheme === 'chaotic' ? 'üé®' : 'üåô';
    if (savedTheme === 'chaotic') applyChaoticTheme();

    // –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
    function updateLanguage(lang) {
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            element.textContent = translations[lang][key];
        });
        document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
            const key = element.getAttribute('data-i18n-placeholder');
            element.placeholder = translations[lang][key];
        });
        document.querySelectorAll('option[data-i18n]').forEach(option => {
            const key = option.getAttribute('data-i18n');
            option.textContent = translations[lang][key];
        });
        document.title = translations[lang].title;
        localStorage.setItem('language', lang);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
    function checkSecretLanguage() {
        if (localStorage.getItem('wingdingsUnlocked')) {
            if (!languageSwitcher.querySelector('option[value="wd"]')) {
                const option = document.createElement('option');
                option.value = 'wd';
                option.textContent = 'üìú Wingdings';
                languageSwitcher.appendChild(option);
            }
        }
    }

    languageSwitcher.addEventListener('change', (e) => {
        updateLanguage(e.target.value);
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    const savedLang = localStorage.getItem('language') || 'ru';
    languageSwitcher.value = savedLang;
    updateLanguage(savedLang);
    checkSecretLanguage();

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    addTaskBtn.addEventListener('click', () => {
        const taskEntry = document.createElement('div');
        taskEntry.className = 'task-entry';
        taskEntry.innerHTML = `
            <input type="text" class="task-title" data-i18n-placeholder="taskTitlePlaceholder" placeholder="${translations[savedLang].taskTitlePlaceholder}" required>
            <select class="task-priority">
                <option value="–Ω–∏–∑–∫–∞—è" data-i18n="lowPriority">${translations[savedLang].lowPriority}</option>
                <option value="—Å—Ä–µ–¥–Ω—è—è" data-i18n="mediumPriority">${translations[savedLang].mediumPriority}</option>
                <option value="–≤—ã—Å–æ–∫–∞—è" data-i18n="highPriority">${translations[savedLang].highPriority}</option>
            </select>
            <input type="text" class="task-category" data-i18n-placeholder="categoryPlaceholder" placeholder="${translations[savedLang].categoryPlaceholder}" required>
            <button class="remove-task-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
        `;
        taskList.appendChild(taskEntry);
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    taskList.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-task-btn') && taskList.children.length > 1) {
            e.target.parentElement.remove();
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –∫ API
    submitTasksBtn.addEventListener('click', async () => {
        const lang = languageSwitcher.value;
        const tasks = Array.from(taskList.querySelectorAll('.task-entry')).map(entry => ({
            title: entry.querySelector('.task-title').value,
            priority: entry.querySelector('.task-priority').value,
            category: entry.querySelector('.task-category').value
        }));
        const timeRange = timeRangeInput.value;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!tasks.every(task => task.title && task.category)) {
            alert(translations[lang].errorEmptyTasks);
            return;
        }
        if (!timeRange.match(/^\d{2}:\d{2}\s*-\s*\d{2}:\d{2}$/)) {
            alert(translations[lang].errorTimeFormat);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        const hasWingdings = tasks.some(task => task.title === 'Windings' && task.category === 'Windings' && task.priority === '–≤—ã—Å–æ–∫–∞—è');
        const hasChaotic = tasks.some(task => task.title === 'Chaotic' && task.category === 'Chaotic' && task.priority === '–≤—ã—Å–æ–∫–∞—è');

        if (hasWingdings || hasChaotic) {
            if (hasWingdings) {
                localStorage.setItem('wingdingsUnlocked', 'true');
                checkSecretLanguage();
                scheduleOutput.textContent = translations[lang].newLanguage;
            }
            if (hasChaotic) {
                localStorage.setItem('chaoticUnlocked', 'true');
            }
            resultSection.classList.remove('hidden');
            return;
        }

        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
const taskListText = tasks.map((task, i) => `- ${task.title} (–í–∞–∂–Ω–æ—Å—Ç—å: ${task.priority}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${task.category})`).join('\n');
const prompt = `–¢—ã ‚Äî –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
${taskListText}
–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: ${timeRange}.
–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞–π —Å–æ–≤–µ—Ç, –∫–∞–∫ –ª—É—á—à–µ –∏—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
–°–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –∫—Ä–∞—Ç–∫–∏–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.`;

// –ï—Å–ª–∏ —è–∑—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç
if (lang === 'en') {
    prompt = `You are an AI task planner. I have the following tasks:
${taskListText}
Available time: ${timeRange}.
Schedule the tasks by time and provide advice on how to complete them efficiently.
Keep the response concise and structured.`;
}

try {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    const { GoogleGenerativeAI } = await import("@google/generative-ai");
    const genAI = new GoogleGenerativeAI("AIzaSyCUtheYwMYUhwkTjT5avcSGwetGXFqF-f0");
    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });

    // –í—ã–∑–æ–≤ API
    const result = await model.generateContent(prompt);
    const schedule = result.response.text();

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    scheduleOutput.textContent = schedule;
    resultSection.classList.remove('hidden');
} catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    alert(translations[lang].errorApi);
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    scheduleOutput.textContent = lang === 'en' ? `
Schedule:
- 09:00 - 10:00: Example Task 1
- 10:00 - 11:00: Example Task 2

Advice:
Start with the most important task to maintain energy.
    ` : `
–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:
- 09:00 - 10:00: –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ 1
- 10:00 - 11:00: –ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ 2

–°–æ–≤–µ—Ç:
–ù–∞—á–Ω–∏—Ç–µ —Å —Å–∞–º–æ–π –≤–∞–∂–Ω–æ–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é.
    `;
    resultSection.classList.remove('hidden');
}
