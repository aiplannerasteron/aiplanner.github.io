import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getDatabase, ref, get, push } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-database.js";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Firebase
const firebaseConfig = {
    apiKey: "AIzaSyD8o7Qy-nbdliOLSLJugzJ6cTzleNa8q0o",
    authDomain: "aiplanner-31886.firebaseapp.com",
    projectId: "aiplanner-31886",
    storageBucket: "aiplanner-31886.firebasestorage.app",
    messagingSenderId: "721297878184",
    appId: "1:721297878184:web:20d5281e3e2523a1a5a69d",
    measurementId: "G-7EHQBR6M2B",
    databaseURL: "https://aiplanner-31886-default-rtdb.firebaseio.com"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const database = getDatabase(app);

document.addEventListener('DOMContentLoaded', () => {
    // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
    const translations = {
        ru: {
            title: "–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á",
            appName: "–ò–ò-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
            addTasks: "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏",
            taskTitlePlaceholder: "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏",
            lowPriority: "–ù–∏–∑–∫–∞—è",
            mediumPriority: "–°—Ä–µ–¥–Ω—è—è",
            highPriority: "–í—ã—Å–æ–∫–∞—è",
            addTaskButton: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",
            timeLabel: "‚è∞ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:",
            aiInstructionsLabel: "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò:",
            aiInstructionsPlaceholder: "–í–≤–µ–¥–∏—Ç–µ –æ—Å–æ–±—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ò–ò (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£—á–∏—Ç—ã–≤–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞')",
            submitTasks: "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            scheduleTitle: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–≤–µ—Ç—ã",
            errorEmptyTasks: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–¥–∞—á!",
            errorTimeFormat: "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è!",
            errorApi: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            errorInvalidTime: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ö–æ–Ω–µ—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞.",
            errorVpn: "–û—à–∏–±–∫–∞ API (400). –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–§: –≤–∫–ª—é—á–∏—Ç–µ VPN.",
            warningTitle: "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            warningVpn: "–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–§: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN-—Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
            warningAccuracy: "–ò–ò –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –æ—à–∏–±–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.",
            warningClose: "–ü–æ–Ω—è—Ç–Ω–æ",
            warningToggle: "‚ö†Ô∏è",
            longGeneration: "‚åõ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è",
            longLoading: "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏...",
            adText: "–ü–æ—Å–µ—Ç–∏—Ç–µ By ROlil Studio –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã!",
            langRussian: "üá∑üá∫",
            langEnglish: "üá∫üá∏",
            themeToggle: "‚òÄÔ∏è",
            projectDefense: "–ù–∞–¥–µ–µ–º—Å—è –Ω–∞ –∑–∞—á—ë—Ç!",
            removeTask: "–£–¥–∞–ª–∏—Ç—å",
            saveSchedule: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
            tryAgain: "–ï—â—ë —Ä–∞–∑",
            rateSchedule: "–û—Ü–µ–Ω–∏—Ç—å",
            ratingTitle: "–û—Ü–µ–Ω–∏—Ç–µ —Å–æ–≤–µ—Ç",
            usefulness: "–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å",
            speed: "–°–∫–æ—Ä–æ—Å—Ç—å",
            accuracy: "–ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å",
            submitRating: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            ratingClose: "–ó–∞–∫—Ä—ã—Ç—å",
            statsBtn: "‚≠ê",
            statsTitle: "–†–µ–π—Ç–∏–Ω–≥–∏",
            statsCount: "–û—Ü–µ–Ω–æ–∫: ",
            statsClose: "–ó–∞–∫—Ä—ã—Ç—å"
        },
        en: {
            title: "AI Task Planner",
            appName: "AI Planner",
            addTasks: "Add Tasks",
            taskTitlePlaceholder: "Task Title",
            lowPriority: "Low",
            mediumPriority: "Medium",
            highPriority: "High",
            addTaskButton: "‚ûï Add Task",
            timeLabel: "‚è∞ Available Time:",
            aiInstructionsLabel: "üìù AI Instructions:",
            aiInstructionsPlaceholder: "Enter specific instructions for the AI (e.g., 'Account for breaks every 2 hours')",
            submitTasks: "üìÖ Get Schedule",
            scheduleTitle: "Schedule and Tips",
            errorEmptyTasks: "Fill in all task fields!",
            errorTimeFormat: "Specify a valid time!",
            errorApi: "Error fetching schedule. Try again later.",
            errorInvalidTime: "Invalid time. End time must be after start time.",
            errorVpn: "API Error (400). For users in Russia: enable VPN.",
            warningTitle: "Warning",
            warningVpn: "For users in Russia: use a VPN service for stable operation.",
            warningAccuracy: "The AI may provide inaccurate responses. Verify the results.",
            warningClose: "Understood",
            warningToggle: "‚ö†Ô∏è",
            longGeneration: "‚åõ Generation is taking a long time",
            longLoading: "Loading is taking longer...",
            adText: "Visit By ROlil Studio and try new products!",
            langRussian: "üá∑üá∫",
            langEnglish: "üá∫üá∏",
            themeToggle: "‚òÄÔ∏è",
            projectDefense: "Hoping for a pass!",
            removeTask: "Remove",
            saveSchedule: "Save",
            tryAgain: "Try Again",
            rateSchedule: "Rate",
            ratingTitle: "Rate the Advice",
            usefulness: "Usefulness",
            speed: "Speed",
            accuracy: "Accuracy",
            submitRating: "Submit",
            ratingClose: "Close",
            statsBtn: "‚≠ê",
            statsTitle: "Ratings",
            statsCount: "Ratings: ",
            statsClose: "Close"
        }
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
    const adConfig = {
        text: translations[localStorage.getItem('language') || 'ru'].adText,
        url: "https://t.me/By_RORlil",
        imageUrl: "IMG_20250417_224058_243.jpg"
    };

    const loadingScreen = document.querySelector('.loading-screen');
    const longLoadingText = document.getElementById('long-loading');
    const typingEffect = document.querySelector('.typing-effect');
    const taskInput = document.querySelector('.task-input');
    const taskList = document.getElementById('task-list');
    const addTaskBtn = document.getElementById('add-task-btn');
    const submitTasksBtn = document.getElementById('submit-tasks');
    const warningToggleBtn = document.getElementById('warning-toggle');
    const statsBtn = document.getElementById('stats-btn');
    const timeStartInput = document.getElementById('time-start');
    const timeEndInput = document.getElementById('time-end');
    const aiInstructionsInput = document.getElementById('ai-instructions');
    const resultSection = document.querySelector('.result');
    const scheduleTitle = document.querySelector('.schedule-title');
    const scheduleOutput = document.getElementById('schedule-output');
    const animationOutput = document.getElementById('animation-output');
    const longGenerationText = document.getElementById('long-generation');
    const languageSwitchers = document.querySelectorAll('#language-switcher');
    const themeSwitcher = document.getElementById('theme-switcher');
    const adBanner = document.querySelector('.ad-banner');
    const adLink = document.getElementById('ad-link');
    const adImage = document.getElementById('ad-image');
    const adText = document.getElementById('ad-text');
    const warningSection = document.querySelector('.warning');
    const warningCloseBtn = document.getElementById('warning-close');
    const logoText = document.querySelector('.logo-text');
    const projectDefenseText = document.querySelector('.project-defense');
    const saveScheduleBtn = document.getElementById('save-schedule');
    const tryAgainBtn = document.getElementById('try-again');
    const rateBtn = document.getElementById('rate-btn');
    const ratingWindow = document.querySelector('.rating-window');
    const submitRatingBtn = document.getElementById('submit-rating');
    const ratingCloseBtn = document.getElementById('rating-close');
    const statsWindow = document.querySelector('.stats-window');
    const statsCloseBtn = document.getElementById('stats-close');

    // –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è –Ω–∞ —Ñ–æ–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏
    function startTypingEffect() {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 ';
        let text = '';
        const maxLength = 500;
        const typingInterval = setInterval(() => {
            if (text.length < maxLength) {
                text += chars[Math.floor(Math.random() * chars.length)];
                if (Math.random() < 0.2) text += ' ';
                typingEffect.textContent = text;
            } else {
                text = text.slice(-maxLength + 50);
                typingEffect.textContent = text;
            }
        }, 50);
        return typingInterval;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    const typingInterval = startTypingEffect();
    const longLoadingTimeout = setTimeout(() => {
        longLoadingText.classList.remove('hidden');
        loadingScreen.querySelector('.loading-content').classList.add('blink');
    }, 5000);

    // –°–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        clearInterval(typingInterval);
        clearTimeout(longLoadingTimeout);
        loadingScreen.classList.add('hidden');
    }, 2000);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ 6 –º–∞—è 2025
    const today = new Date();
    const isProjectDefenseDay = today.getFullYear() === 2025 && today.getMonth() === 4 && today.getDate() === 6;
    if (isProjectDefenseDay) {
        projectDefenseText.classList.remove('hidden');
        try {
            confetti({
                particleCount: 100,
                spread: 70,
                origin: { y: 0.6 },
                colors: ['#007bff', '#00d4ff', '#ff4d4d'],
                shapes: ['circle', 'square'],
                gravity: 0.5,
                scalar: 1.2
            });
            setInterval(() => {
                confetti({
                    particleCount: 50,
                    spread: 50,
                    origin: { y: Math.random() },
                    colors: ['#007bff', '#00d4ff', '#ff4d4d'],
                    shapes: ['circle', 'square'],
                    gravity: 0.5,
                    scalar: 1.2
                });
            }, 3000);
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–æ–≤:', e);
        }
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–Ω–Ω–µ—Ä–∞
    adLink.href = adConfig.url;
    adImage.src = adConfig.imageUrl;
    adText.textContent = adConfig.text;

    // –ê–Ω–∏–º–∞—Ü–∏—è –±–∞–Ω–Ω–µ—Ä–∞
    const adAnimations = ['animate-glow', 'animate-rotate', 'animate-bounce'];
    let currentAdAnimationIndex = 0;
    function switchAdAnimation() {
        adBanner.classList.remove(adAnimations[currentAdAnimationIndex]);
        currentAdAnimationIndex = (currentAdAnimationIndex + 1) % adAnimations.length;
        adBanner.classList.add(adAnimations[currentAdAnimationIndex]);
    }
    adBanner.addEventListener('animationend', switchAdAnimation);
    setInterval(() => {
        adBanner.classList.remove(adAnimations[currentAdAnimationIndex]);
        currentAdAnimationIndex = (currentAdAnimationIndex + 1) % adAnimations.length;
        adBanner.classList.add(adAnimations[currentAdAnimationIndex]);
    }, 10000);
    switchAdAnimation();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
    const savedTheme = localStorage.getItem('theme') || 'light';
    const savedLang = localStorage.getItem('language') || 'ru';
    document.body.classList.add(`${savedTheme}-theme`);
    themeSwitcher.textContent = savedTheme === 'dark' ? translations[savedLang].themeToggle : 'üåô';
    languageSwitchers.forEach(btn => {
        btn.classList.toggle('active', btn.getAttribute('data-lang') === savedLang);
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    themeSwitcher.addEventListener('click', () => {
        const isDark = document.body.classList.contains('dark-theme');
        document.body.classList.toggle('dark-theme');
        document.body.classList.toggle('light-theme');
        themeSwitcher.textContent = isDark ? translations[localStorage.getItem('language') || 'ru'].themeToggle : 'üåô';
        localStorage.setItem('theme', isDark ? 'light' : 'dark');
    });

    // –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
    function updateLanguage(lang) {
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            element.textContent = translations[lang][key] || translations['ru'][key];
        });
        document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
            const key = element.getAttribute('data-i18n-placeholder');
            element.placeholder = translations[lang][key] || translations['ru'][key];
        });
        document.querySelectorAll('.priority-btn[data-i18n]').forEach(button => {
            const key = button.getAttribute('data-i18n');
            button.textContent = translations[lang][key] || translations['ru'][key];
        });
        document.title = translations[lang].title || translations['ru'].title;
        adText.textContent = translations[lang].adText;
        localStorage.setItem('language', lang);
        languageSwitchers.forEach(btn => {
            btn.classList.toggle('active', btn.getAttribute('data-lang') === lang);
        });
        document.body.classList.add('language-transition');
        setTimeout(() => document.body.classList.remove('language-transition'), 300);
        updateStats();
    }

    languageSwitchers.forEach(btn => {
        btn.addEventListener('click', () => updateLanguage(btn.getAttribute('data-lang')));
    });

    updateLanguage(savedLang);

    // –≠—Ñ—Ñ–µ–∫—Ç –≥–∞—Ä–º–æ—à–∫–∏ –¥–ª—è –ª–æ–≥–æ
    logoText.addEventListener('click', () => {
        const text = logoText.textContent;
        logoText.innerHTML = text.split('').map((char, i) => `<span class="logo-char" style="animation-delay: ${i * 0.1}s">${char}</span>`).join('');
        logoText.classList.add('shine');
        setTimeout(() => {
            logoText.innerHTML = text;
            logoText.classList.remove('shine');
        }, 1500);
    });

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    function addTask() {
        const taskEntry = document.createElement('div');
        taskEntry.className = 'task-entry';
        taskEntry.innerHTML = `
            <input type="text" class="task-title" data-i18n-placeholder="taskTitlePlaceholder" placeholder="${translations[savedLang].taskTitlePlaceholder}" required>
            <div class="priority-buttons">
                <button class="priority-btn" data-priority="–Ω–∏–∑–∫–∞—è" data-i18n="lowPriority">${translations[savedLang].lowPriority}</button>
                <button class="priority-btn active" data-priority="—Å—Ä–µ–¥–Ω—è—è" data-i18n="mediumPriority">${translations[savedLang].mediumPriority}</button>
                <button class="priority-btn" data-priority="–≤—ã—Å–æ–∫–∞—è" data-i18n="highPriority">${translations[savedLang].highPriority}</button>
            </div>
            <button class="remove-task-btn" title="${translations[savedLang].removeTask}">üóëÔ∏è</button>
        `;
        taskList.appendChild(taskEntry);
        attachPriorityListeners(taskEntry);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
    addTask();

    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    function attachPriorityListeners(taskEntry) {
        const buttons = taskEntry.querySelectorAll('.priority-btn');
        buttons.forEach(btn => {
            btn.addEventListener('click', () => {
                buttons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
            });
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    taskList.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-task-btn')) {
            e.target.parentElement.remove();
        }
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    function validateTimeRange(start, end, lang) {
        if (!start || !end) {
            return { valid: false, error: translations[lang].errorTimeFormat };
        }
        const startTime = new Date(`1970-01-01T${start}:00`);
        const endTime = new Date(`1970-01-01T${end}:00`);
        if (startTime >= endTime) {
            return { valid: false, error: translations[lang].errorInvalidTime };
        }
        return { valid: true };
    }

    // –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warningToggleBtn.addEventListener('click', () => {
        warningSection.classList.remove('hidden');
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warningCloseBtn.addEventListener('click', () => {
        warningSection.classList.add('hidden');
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    saveScheduleBtn.addEventListener('click', () => {
        const schedule = scheduleOutput.textContent;
        const blob = new Blob([schedule], { type: 'text/plain' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = translations[savedLang].scheduleTitle + '.txt';
        link.click();
        URL.revokeObjectURL(link.href);
    });

    // –°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    tryAgainBtn.addEventListener('click', () => {
        resultSection.classList.add('hidden');
        taskInput.classList.remove('hidden');
        taskList.innerHTML = '';
        addTask();
        timeStartInput.value = '';
        timeEndInput.value = '';
        aiInstructionsInput.value = '';
        scheduleOutput.textContent = '';
        scheduleTitle.classList.add('hidden');
        resultSection.style.transform = 'translateY(0)';
        taskInput.style.opacity = '1';
        taskInput.style.transform = 'scale(1)';
    });

    // –û—Ü–µ–Ω–∫–∞
    const emojis = ['üò≠', 'üò¢', 'üòê', 'üôÇ', 'ü§©'];
    function updateEmoji(input, emojiElement) {
        const value = parseInt(input.value);
        emojiElement.textContent = emojis[value - 1];
        emojiElement.classList.add('pop-in');
        setTimeout(() => emojiElement.classList.remove('pop-in'), 500);
    }

    document.querySelectorAll('.rating-item input[type="range"]').forEach(input => {
        const emojiElement = input.nextElementSibling;
        updateEmoji(input, emojiElement);
        input.addEventListener('input', () => updateEmoji(input, emojiElement));
    });

    rateBtn.addEventListener('click', () => {
        ratingWindow.classList.remove('hidden');
    });

    submitRatingBtn.addEventListener('click', async () => {
        const usefulness = parseInt(document.getElementById('usefulness').value);
        const speed = parseInt(document.getElementById('speed').value);
        const accuracy = parseInt(document.getElementById('accuracy').value);
        try {
            await push(ref(database, 'ratings'), {
                usefulness,
                speed,
                accuracy,
                timestamp: Date.now()
            });
            ratingWindow.classList.add('hidden');
            updateStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ—Ü–µ–Ω–∫–∏:', error);
        }
    });

    ratingCloseBtn.addEventListener('click', () => {
        ratingWindow.classList.add('hidden');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    statsBtn.addEventListener('click', () => {
        statsWindow.classList.remove('hidden');
        updateStats();
    });

    statsCloseBtn.addEventListener('click', () => {
        statsWindow.classList.add('hidden');
    });

    async function updateStats() {
        try {
            const snapshot = await get(ref(database, 'ratings'));
            if (snapshot.exists()) {
                const ratings = snapshot.val();
                const ratingsArray = Object.values(ratings);
                const count = ratingsArray.length;
                const avgUsefulness = (ratingsArray.reduce((sum, r) => sum + r.usefulness, 0) / count).toFixed(1);
                const avgSpeed = (ratingsArray.reduce((sum, r) => sum + r.speed, 0) / count).toFixed(1);
                const avgAccuracy = (ratingsArray.reduce((sum, r) => sum + r.accuracy, 0) / count).toFixed(1);

                document.getElementById('stats-count').textContent = translations[savedLang].statsCount + count;
                document.getElementById('usefulness-score').textContent = avgUsefulness;
                document.getElementById('speed-score').textContent = avgSpeed;
                document.getElementById('accuracy-score').textContent = avgAccuracy;
                document.getElementById('usefulness-progress').style.width = `${(avgUsefulness / 5) * 100}%`;
                document.getElementById('speed-progress').style.width = `${(avgSpeed / 5) * 100}%`;
                document.getElementById('accuracy-progress').style.width = `${(avgAccuracy / 5) * 100}%`;
            } else {
                document.getElementById('stats-count').textContent = translations[savedLang].statsCount + '0';
                document.getElementById('usefulness-score').textContent = '0.0';
                document.getElementById('speed-score').textContent = '0.0';
                document.getElementById('accuracy-score').textContent = '0.0';
                document.getElementById('usefulness-progress').style.width = '0%';
                document.getElementById('speed-progress').style.width = '0%';
                document.getElementById('accuracy-progress').style.width = '0%';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –∫ API
    submitTasksBtn.addEventListener('click', async () => {
        const lang = localStorage.getItem('language') || 'ru';

        // –ü–æ–∫–∞–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if (!localStorage.getItem('warningShown')) {
            warningSection.classList.remove('hidden');
            localStorage.setItem('warningShown', 'true');
            return;
        }

        const tasks = Array.from(taskList.querySelectorAll('.task-entry')).map(entry => {
            const activePriority = entry.querySelector('.priority-btn.active');
            return {
                title: entry.querySelector('.task-title').value.trim(),
                priority: activePriority ? activePriority.getAttribute('data-priority') : '—Å—Ä–µ–¥–Ω—è—è'
            };
        });
        const startTime = timeStartInput.value;
        const endTime = timeEndInput.value;
        const aiInstructions = aiInstructionsInput.value.trim();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á
        if (!tasks.every(task => task.title)) {
            alert(translations[lang].errorEmptyTasks);
            return;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
        const timeValidation = validateTimeRange(startTime, endTime, lang);
        if (!timeValidation.valid) {
            alert(timeValidation.error);
            return;
        }

        // –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏
        taskInput.style.opacity = '0';
        taskInput.style.transform = 'scale(0.8)';
        setTimeout(() => {
            taskInput.classList.add('hidden');
            resultSection.classList.remove('hidden');
            resultSection.style.transform = 'translateY(-100px)';
            scheduleOutput.classList.add('blur');
            animationOutput.classList.remove('hidden');
            animationOutput.innerHTML = '<div class="loading"><span>.</span><span>.</span><span>.</span></div>';
        }, 300);

        // –¢–∞–π–º–µ—Ä –¥–æ–ª–≥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const longGenerationTimeout = setTimeout(() => {
            longGenerationText.classList.remove('hidden');
            resultSection.classList.add('stretch');
        }, 15000);

        // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const taskListText = tasks.map((task, i) => `- ${task.title} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${task.priority})`).join('\n');
        let prompt = `–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á, —É—á–∏—Ç—ã–≤–∞—è –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:
${taskListText}
–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: ${startTime} - ${endTime}.
${aiInstructions ? `–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${aiInstructions}` : '–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.'}
–ü—Ä–∞–≤–∏–ª–∞:
1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–¥–∞—á —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.
2. –£—á–∏—Ç—ã–≤–∞–π –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∑–∞–¥–∞—á–∏, –∏–∑–±–µ–≥–∞—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏.
3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–µ—Ä—ã–≤—ã, –¥–æ–±–∞–≤–ª—è–π –∏—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ).
4. –ö–∞–∂–¥–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00-10:00).
5. –î–æ–±–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Ç–∏–ø–µ –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–±–æ—á–∏–µ, –ª–∏—á–Ω—ã–µ) –∏ –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ Markdown, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã (-, :, ( )). –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, –∫—Ä–∞—Ç–∫–∏–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º. –ü—Ä–∏–º–µ—Ä:
09:00-10:00 –ó–∞–¥–∞—á–∞ 1
10:00-10:30 –ó–∞–¥–∞—á–∞ 2
–°–æ–≤–µ—Ç: –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —É—Ç—Ä–æ–º.`;

        if (lang === 'en') {
            prompt = `You are a professional AI task planner. Your goal is to create an optimal schedule for completing tasks, considering their priorities, available time, and additional instructions. I have the following tasks:
${taskListText}
Available time: ${startTime} - ${endTime}.
${aiInstructions ? `Additional instructions: ${aiInstructions}` : 'No additional instructions.'}
Rules:
1. Schedule tasks by time, starting with high-priority tasks.
2. Consider the available time and distribute tasks evenly, avoiding overload.
3. If breaks are specified, include them (default: 10 minutes every 2 hours unless otherwise stated).
4. Each task must have a time interval (e.g., 09:00-10:00).
5. Add a brief tip at the end, based on the type of tasks (e.g., work, personal) and their priorities.
Response format: plain text, no Markdown, use only symbols (-, :, ( )). The response must be structured, concise, and clear. Example:
09:00-10:00 Task 1
10:00-10:30 Task 2
Tip: Focus on high-priority tasks in the morning.`;
        }

        try {
            const apiKey = "AIzaSyCUtheYwMYUhwkTjT5avcSGwetGXFqF-f0";
            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }]
                })
            });

            clearTimeout(longGenerationTimeout);
            longGenerationText.classList.add('hidden');
            resultSection.classList.remove('stretch');

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            const schedule = data.candidates[0].content.parts[0].text;

            // –£—Å–ø–µ—à–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è —Å —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ–º
            animationOutput.innerHTML = '<div class="success">‚úÖ</div>';
            setTimeout(() => {
                scheduleOutput.classList.remove('blur');
                animationOutput.classList.add('hidden');
                scheduleOutput.textContent = schedule;
                scheduleTitle.classList.remove('hidden');
                resultSection.classList.add('stretch');
                setTimeout(() => resultSection.classList.remove('stretch'), 500);
            }, 1000);
        } catch (error) {
            clearTimeout(longGenerationTimeout);
            longGenerationText.classList.add('hidden');
            resultSection.classList.remove('stretch');

            let errorMessage, errorSource, errorDetails;

            if (error.message.includes('400')) {
                errorMessage = translations[lang].errorVpn;
                errorSource = lang === 'en' ? 'API Access' : '–î–æ—Å—Ç—É–ø –∫ API';
                errorDetails = lang === 'en' ? 'API request failed. For users in Russia, please enable VPN.' : '–ó–∞–ø—Ä–æ—Å –∫ API –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –†–§ –≤–∫–ª—é—á–∏—Ç–µ VPN.';
                animationOutput.innerHTML = '<div class="error">‚ùå</div>';
            } else {
                errorMessage = translations[lang].errorApi;
                errorSource = lang === 'en' ? 'Unknown API Error' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API';
                errorDetails = error.message;
                animationOutput.innerHTML = '<div class="error">‚ùå</div>';
            }

            setTimeout(() => {
                scheduleOutput.classList.remove('blur');
                animationOutput.classList.add('hidden');
                scheduleOutput.textContent = lang === 'en' ? `
Error:
- Source: ${errorSource}
- Message: ${errorMessage}
- Details: ${errorDetails}
                ` : `
–û—à–∏–±–∫–∞:
- –ò—Å—Ç–æ—á–Ω–∏–∫: ${errorSource}
- –°–æ–æ–±—â–µ–Ω–∏–µ: ${errorMessage}
- –î–µ—Ç–∞–ª–∏: ${errorDetails}
                `;
                scheduleTitle.classList.remove('hidden');
                resultSection.classList.add('stretch');
                setTimeout(() => resultSection.classList.remove('stretch'), 500);
            }, 1000);
        }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    addTaskBtn.addEventListener('click', addTask);
});